
vrs_cv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f28  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001064  0800106c  0001106c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001064  08001064  00011064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001068  08001068  00011068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  0001106c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000000  0800106c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000024  0800106c  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0001106c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004d7c  00000000  00000000  00011095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b73  00000000  00000000  00015e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000720  00000000  00000000  00016988  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000698  00000000  00000000  000170a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002171  00000000  00000000  00017740  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000021fa  00000000  00000000  000198b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0001baab  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001ed0  00000000  00000000  0001bb2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001d9fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	0800104c 	.word	0x0800104c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000004 	.word	0x20000004
 8000178:	0800104c 	.word	0x0800104c

0800017c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000184:	2300      	movs	r3, #0
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	2300      	movs	r3, #0
 800018a:	73bb      	strb	r3, [r7, #14]
 800018c:	230f      	movs	r3, #15
 800018e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	78db      	ldrb	r3, [r3, #3]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d038      	beq.n	800020a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000198:	4b26      	ldr	r3, [pc, #152]	; (8000234 <NVIC_Init+0xb8>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	43db      	mvns	r3, r3
 800019e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001a2:	0a1b      	lsrs	r3, r3, #8
 80001a4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	f1c3 0304 	rsb	r3, r3, #4
 80001ac:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001ae:	7b7a      	ldrb	r2, [r7, #13]
 80001b0:	7bfb      	ldrb	r3, [r7, #15]
 80001b2:	fa42 f303 	asr.w	r3, r2, r3
 80001b6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	461a      	mov	r2, r3
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	fa02 f303 	lsl.w	r3, r2, r3
 80001c4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	789a      	ldrb	r2, [r3, #2]
 80001ca:	7b7b      	ldrb	r3, [r7, #13]
 80001cc:	4013      	ands	r3, r2
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	4313      	orrs	r3, r2
 80001d4:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001d6:	7bfb      	ldrb	r3, [r7, #15]
 80001d8:	011b      	lsls	r3, r3, #4
 80001da:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001dc:	4a16      	ldr	r2, [pc, #88]	; (8000238 <NVIC_Init+0xbc>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4413      	add	r3, r2
 80001e4:	7bfa      	ldrb	r2, [r7, #15]
 80001e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <NVIC_Init+0xbc>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	095b      	lsrs	r3, r3, #5
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	f003 031f 	and.w	r3, r3, #31
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000208:	e00f      	b.n	800022a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020a:	490b      	ldr	r1, [pc, #44]	; (8000238 <NVIC_Init+0xbc>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	095b      	lsrs	r3, r3, #5
 8000212:	b2db      	uxtb	r3, r3
 8000214:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	f003 031f 	and.w	r3, r3, #31
 800021e:	2201      	movs	r2, #1
 8000220:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000222:	f100 0320 	add.w	r3, r0, #32
 8000226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	e000e100 	.word	0xe000e100

0800023c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800025a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800025e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	791b      	ldrb	r3, [r3, #4]
 8000264:	021a      	lsls	r2, r3, #8
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4313      	orrs	r3, r2
 800026c:	68fa      	ldr	r2, [r7, #12]
 800026e:	4313      	orrs	r3, r2
 8000270:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	68fa      	ldr	r2, [r7, #12]
 8000276:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800027e:	68fa      	ldr	r2, [r7, #12]
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <ADC_Init+0xa4>)
 8000282:	4013      	ands	r3, r2
 8000284:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	691a      	ldr	r2, [r3, #16]
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000294:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	795b      	ldrb	r3, [r3, #5]
 800029a:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 800029c:	4313      	orrs	r3, r2
 800029e:	68fa      	ldr	r2, [r7, #12]
 80002a0:	4313      	orrs	r3, r2
 80002a2:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ae:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 80002b6:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	7d1b      	ldrb	r3, [r3, #20]
 80002bc:	3b01      	subs	r3, #1
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	7afb      	ldrb	r3, [r7, #11]
 80002c2:	4313      	orrs	r3, r2
 80002c4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80002c6:	7afb      	ldrb	r3, [r7, #11]
 80002c8:	051b      	lsls	r3, r3, #20
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	4313      	orrs	r3, r2
 80002ce:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	c0fff7fd 	.word	0xc0fff7fd

080002e4 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2200      	movs	r2, #0
 80002fc:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800030a:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2201      	movs	r2, #1
 8000316:	751a      	strb	r2, [r3, #20]
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop

08000324 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d006      	beq.n	8000344 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	f043 0201 	orr.w	r2, r3, #1
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000342:	e005      	b.n	8000350 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	f023 0201 	bic.w	r2, r3, #1
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	609a      	str	r2, [r3, #8]
  }
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop

0800035c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	4608      	mov	r0, r1
 8000366:	4611      	mov	r1, r2
 8000368:	461a      	mov	r2, r3
 800036a:	4603      	mov	r3, r0
 800036c:	70fb      	strb	r3, [r7, #3]
 800036e:	460b      	mov	r3, r1
 8000370:	70bb      	strb	r3, [r7, #2]
 8000372:	4613      	mov	r3, r2
 8000374:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	2300      	movs	r3, #0
 800037c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 800037e:	78fb      	ldrb	r3, [r7, #3]
 8000380:	2b1d      	cmp	r3, #29
 8000382:	d923      	bls.n	80003cc <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000388:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 800038a:	78fb      	ldrb	r3, [r7, #3]
 800038c:	f1a3 021e 	sub.w	r2, r3, #30
 8000390:	4613      	mov	r3, r2
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	4413      	add	r3, r2
 8000396:	2207      	movs	r2, #7
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	43db      	mvns	r3, r3
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	4013      	ands	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 80003a8:	7879      	ldrb	r1, [r7, #1]
 80003aa:	78fb      	ldrb	r3, [r7, #3]
 80003ac:	f1a3 021e 	sub.w	r2, r3, #30
 80003b0:	4613      	mov	r3, r2
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	4413      	add	r3, r2
 80003b6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ba:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80003ca:	e06c      	b.n	80004a6 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b13      	cmp	r3, #19
 80003d0:	d923      	bls.n	800041a <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 80003d8:	78fb      	ldrb	r3, [r7, #3]
 80003da:	f1a3 0214 	sub.w	r2, r3, #20
 80003de:	4613      	mov	r3, r2
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	4413      	add	r3, r2
 80003e4:	2207      	movs	r2, #7
 80003e6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ea:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	43db      	mvns	r3, r3
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	4013      	ands	r3, r2
 80003f4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 80003f6:	7879      	ldrb	r1, [r7, #1]
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	f1a3 0214 	sub.w	r2, r3, #20
 80003fe:	4613      	mov	r3, r2
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	4413      	add	r3, r2
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800040a:	68fa      	ldr	r2, [r7, #12]
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	4313      	orrs	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	e045      	b.n	80004a6 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 800041a:	78fb      	ldrb	r3, [r7, #3]
 800041c:	2b09      	cmp	r3, #9
 800041e:	d923      	bls.n	8000468 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	691b      	ldr	r3, [r3, #16]
 8000424:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	f1a3 020a 	sub.w	r2, r3, #10
 800042c:	4613      	mov	r3, r2
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	4413      	add	r3, r2
 8000432:	2207      	movs	r2, #7
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	43db      	mvns	r3, r3
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	4013      	ands	r3, r2
 8000442:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000444:	7879      	ldrb	r1, [r7, #1]
 8000446:	78fb      	ldrb	r3, [r7, #3]
 8000448:	f1a3 020a 	sub.w	r2, r3, #10
 800044c:	4613      	mov	r3, r2
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	4413      	add	r3, r2
 8000452:	fa01 f303 	lsl.w	r3, r1, r3
 8000456:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000458:	68fa      	ldr	r2, [r7, #12]
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	4313      	orrs	r3, r2
 800045e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	611a      	str	r2, [r3, #16]
 8000466:	e01e      	b.n	80004a6 <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 800046e:	78fa      	ldrb	r2, [r7, #3]
 8000470:	4613      	mov	r3, r2
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	4413      	add	r3, r2
 8000476:	2207      	movs	r2, #7
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	43db      	mvns	r3, r3
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	4013      	ands	r3, r2
 8000486:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000488:	7879      	ldrb	r1, [r7, #1]
 800048a:	78fa      	ldrb	r2, [r7, #3]
 800048c:	4613      	mov	r3, r2
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	4413      	add	r3, r2
 8000492:	fa01 f303 	lsl.w	r3, r1, r3
 8000496:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	4313      	orrs	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80004a6:	78bb      	ldrb	r3, [r7, #2]
 80004a8:	2b06      	cmp	r3, #6
 80004aa:	d821      	bhi.n	80004f0 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 80004b2:	78bb      	ldrb	r3, [r7, #2]
 80004b4:	1e5a      	subs	r2, r3, #1
 80004b6:	4613      	mov	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	4413      	add	r3, r2
 80004bc:	221f      	movs	r2, #31
 80004be:	fa02 f303 	lsl.w	r3, r2, r3
 80004c2:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	43db      	mvns	r3, r3
 80004c8:	68fa      	ldr	r2, [r7, #12]
 80004ca:	4013      	ands	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80004ce:	78f9      	ldrb	r1, [r7, #3]
 80004d0:	78bb      	ldrb	r3, [r7, #2]
 80004d2:	1e5a      	subs	r2, r3, #1
 80004d4:	4613      	mov	r3, r2
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	fa01 f303 	lsl.w	r3, r1, r3
 80004de:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80004ee:	e095      	b.n	800061c <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80004f0:	78bb      	ldrb	r3, [r7, #2]
 80004f2:	2b0c      	cmp	r3, #12
 80004f4:	d821      	bhi.n	800053a <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004fa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 80004fc:	78bb      	ldrb	r3, [r7, #2]
 80004fe:	1fda      	subs	r2, r3, #7
 8000500:	4613      	mov	r3, r2
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	221f      	movs	r2, #31
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	43db      	mvns	r3, r3
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	4013      	ands	r3, r2
 8000516:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000518:	78f9      	ldrb	r1, [r7, #3]
 800051a:	78bb      	ldrb	r3, [r7, #2]
 800051c:	1fda      	subs	r2, r3, #7
 800051e:	4613      	mov	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	4413      	add	r3, r2
 8000524:	fa01 f303 	lsl.w	r3, r1, r3
 8000528:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	4313      	orrs	r3, r2
 8000530:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000538:	e070      	b.n	800061c <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 800053a:	78bb      	ldrb	r3, [r7, #2]
 800053c:	2b12      	cmp	r3, #18
 800053e:	d823      	bhi.n	8000588 <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000544:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 8000546:	78bb      	ldrb	r3, [r7, #2]
 8000548:	f1a3 020d 	sub.w	r2, r3, #13
 800054c:	4613      	mov	r3, r2
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	4413      	add	r3, r2
 8000552:	221f      	movs	r2, #31
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	43db      	mvns	r3, r3
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	4013      	ands	r3, r2
 8000562:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000564:	78f9      	ldrb	r1, [r7, #3]
 8000566:	78bb      	ldrb	r3, [r7, #2]
 8000568:	f1a3 020d 	sub.w	r2, r3, #13
 800056c:	4613      	mov	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	4413      	add	r3, r2
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4313      	orrs	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000586:	e049      	b.n	800061c <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 8000588:	78bb      	ldrb	r3, [r7, #2]
 800058a:	2b18      	cmp	r3, #24
 800058c:	d823      	bhi.n	80005d6 <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000592:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 8000594:	78bb      	ldrb	r3, [r7, #2]
 8000596:	f1a3 0213 	sub.w	r2, r3, #19
 800059a:	4613      	mov	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	4413      	add	r3, r2
 80005a0:	221f      	movs	r2, #31
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	43db      	mvns	r3, r3
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	4013      	ands	r3, r2
 80005b0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 80005b2:	78f9      	ldrb	r1, [r7, #3]
 80005b4:	78bb      	ldrb	r3, [r7, #2]
 80005b6:	f1a3 0213 	sub.w	r2, r3, #19
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80005d4:	e022      	b.n	800061c <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 80005dc:	78bb      	ldrb	r3, [r7, #2]
 80005de:	f1a3 0219 	sub.w	r2, r3, #25
 80005e2:	4613      	mov	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	4413      	add	r3, r2
 80005e8:	221f      	movs	r2, #31
 80005ea:	fa02 f303 	lsl.w	r3, r2, r3
 80005ee:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	43db      	mvns	r3, r3
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	4013      	ands	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 80005fa:	78f9      	ldrb	r1, [r7, #3]
 80005fc:	78bb      	ldrb	r3, [r7, #2]
 80005fe:	f1a3 0219 	sub.w	r2, r3, #25
 8000602:	4613      	mov	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4413      	add	r3, r2
 8000608:	fa01 f303 	lsl.w	r3, r1, r3
 800060c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	4313      	orrs	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop

08000628 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	609a      	str	r2, [r3, #8]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000654:	b29b      	uxth	r3, r3
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	887b      	ldrh	r3, [r7, #2]
 8000676:	4013      	ands	r3, r2
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 800067c:	2301      	movs	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e001      	b.n	8000686 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000694:	b480      	push	{r7}
 8000696:	b087      	sub	sp, #28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	e07e      	b.n	80007ae <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80006b0:	2201      	movs	r2, #1
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	4013      	ands	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d16d      	bne.n	80007a8 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	2103      	movs	r1, #3
 80006d6:	fa01 f303 	lsl.w	r3, r1, r3
 80006da:	43db      	mvns	r3, r3
 80006dc:	401a      	ands	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	4619      	mov	r1, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	fa01 f303 	lsl.w	r3, r1, r3
 80006f4:	431a      	orrs	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d003      	beq.n	800070a <GPIO_Init+0x76>
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	791b      	ldrb	r3, [r3, #4]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d136      	bne.n	8000778 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	689a      	ldr	r2, [r3, #8]
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	2103      	movs	r1, #3
 8000714:	fa01 f303 	lsl.w	r3, r1, r3
 8000718:	43db      	mvns	r3, r3
 800071a:	401a      	ands	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	689a      	ldr	r2, [r3, #8]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	795b      	ldrb	r3, [r3, #5]
 8000728:	4619      	mov	r1, r3
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	431a      	orrs	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	889b      	ldrh	r3, [r3, #4]
 800073c:	b29a      	uxth	r2, r3
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	b29b      	uxth	r3, r3
 8000742:	2101      	movs	r1, #1
 8000744:	fa01 f303 	lsl.w	r3, r1, r3
 8000748:	b29b      	uxth	r3, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	b29b      	uxth	r3, r3
 800074e:	4013      	ands	r3, r2
 8000750:	b29a      	uxth	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	889b      	ldrh	r3, [r3, #4]
 800075a:	b29b      	uxth	r3, r3
 800075c:	b21a      	sxth	r2, r3
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	799b      	ldrb	r3, [r3, #6]
 8000762:	4619      	mov	r1, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	b29b      	uxth	r3, r3
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	b21b      	sxth	r3, r3
 800076e:	4313      	orrs	r3, r2
 8000770:	b21b      	sxth	r3, r3
 8000772:	b29a      	uxth	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	68da      	ldr	r2, [r3, #12]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	b29b      	uxth	r3, r3
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	2103      	movs	r1, #3
 8000784:	fa01 f303 	lsl.w	r3, r1, r3
 8000788:	43db      	mvns	r3, r3
 800078a:	401a      	ands	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	68da      	ldr	r2, [r3, #12]
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	79db      	ldrb	r3, [r3, #7]
 8000798:	4619      	mov	r1, r3
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	431a      	orrs	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3301      	adds	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	f67f af7d 	bls.w	80006b0 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80007b6:	bf00      	nop
 80007b8:	371c      	adds	r7, #28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	8a9b      	ldrh	r3, [r3, #20]
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	887b      	ldrh	r3, [r7, #2]
 80007d4:	4053      	eors	r3, r2
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	829a      	strh	r2, [r3, #20]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop

080007e8 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80007f2:	4a04      	ldr	r2, [pc, #16]	; (8000804 <RCC_HSICmd+0x1c>)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	42470000 	.word	0x42470000

08000808 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d006      	beq.n	8000828 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800081a:	4909      	ldr	r1, [pc, #36]	; (8000840 <RCC_AHBPeriphClockCmd+0x38>)
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <RCC_AHBPeriphClockCmd+0x38>)
 800081e:	69da      	ldr	r2, [r3, #28]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4313      	orrs	r3, r2
 8000824:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000826:	e006      	b.n	8000836 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000828:	4905      	ldr	r1, [pc, #20]	; (8000840 <RCC_AHBPeriphClockCmd+0x38>)
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <RCC_AHBPeriphClockCmd+0x38>)
 800082c:	69da      	ldr	r2, [r3, #28]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	43db      	mvns	r3, r3
 8000832:	4013      	ands	r3, r2
 8000834:	61cb      	str	r3, [r1, #28]
  }
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	40023800 	.word	0x40023800

08000844 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000856:	4909      	ldr	r1, [pc, #36]	; (800087c <RCC_APB2PeriphClockCmd+0x38>)
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <RCC_APB2PeriphClockCmd+0x38>)
 800085a:	6a1a      	ldr	r2, [r3, #32]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4313      	orrs	r3, r2
 8000860:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000862:	e006      	b.n	8000872 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000864:	4905      	ldr	r1, [pc, #20]	; (800087c <RCC_APB2PeriphClockCmd+0x38>)
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <RCC_APB2PeriphClockCmd+0x38>)
 8000868:	6a1a      	ldr	r2, [r3, #32]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	43db      	mvns	r3, r3
 800086e:	4013      	ands	r3, r2
 8000870:	620b      	str	r3, [r1, #32]
  }
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	40023800 	.word	0x40023800

08000880 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d006      	beq.n	80008a0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000892:	4909      	ldr	r1, [pc, #36]	; (80008b8 <RCC_APB1PeriphClockCmd+0x38>)
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <RCC_APB1PeriphClockCmd+0x38>)
 8000896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4313      	orrs	r3, r2
 800089c:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800089e:	e006      	b.n	80008ae <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80008a0:	4905      	ldr	r1, [pc, #20]	; (80008b8 <RCC_APB1PeriphClockCmd+0x38>)
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <RCC_APB1PeriphClockCmd+0x38>)
 80008a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	43db      	mvns	r3, r3
 80008aa:	4013      	ands	r3, r2
 80008ac:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	40023800 	.word	0x40023800

080008bc <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80008bc:	b480      	push	{r7}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	095b      	lsrs	r3, r3, #5
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d103      	bne.n	80008e8 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <RCC_GetFlagStatus+0x60>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e002      	b.n	80008ee <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <RCC_GetFlagStatus+0x60>)
 80008ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ec:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 031f 	and.w	r3, r3, #31
 80008f4:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	fa22 f303 	lsr.w	r3, r2, r3
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	2b00      	cmp	r3, #0
 8000904:	d002      	beq.n	800090c <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 8000906:	2301      	movs	r3, #1
 8000908:	74fb      	strb	r3, [r7, #19]
 800090a:	e001      	b.n	8000910 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000910:	7cfb      	ldrb	r3, [r7, #19]
}
 8000912:	4618      	mov	r0, r3
 8000914:	371c      	adds	r7, #28
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40023800 	.word	0x40023800

08000920 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800093a:	d00b      	beq.n	8000954 <TIM_TimeBaseInit+0x34>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <TIM_TimeBaseInit+0x90>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d007      	beq.n	8000954 <TIM_TimeBaseInit+0x34>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <TIM_TimeBaseInit+0x94>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d003      	beq.n	8000954 <TIM_TimeBaseInit+0x34>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <TIM_TimeBaseInit+0x98>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d108      	bne.n	8000966 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000954:	89fb      	ldrh	r3, [r7, #14]
 8000956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800095a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	885a      	ldrh	r2, [r3, #2]
 8000960:	89fb      	ldrh	r3, [r7, #14]
 8000962:	4313      	orrs	r3, r2
 8000964:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <TIM_TimeBaseInit+0x9c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d00c      	beq.n	8000988 <TIM_TimeBaseInit+0x68>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <TIM_TimeBaseInit+0xa0>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d008      	beq.n	8000988 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000976:	89fb      	ldrh	r3, [r7, #14]
 8000978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800097c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	891a      	ldrh	r2, [r3, #8]
 8000982:	89fb      	ldrh	r3, [r7, #14]
 8000984:	4313      	orrs	r3, r2
 8000986:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	89fa      	ldrh	r2, [r7, #14]
 800098c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2201      	movs	r2, #1
 80009a2:	829a      	strh	r2, [r3, #20]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40000400 	.word	0x40000400
 80009b4:	40000800 	.word	0x40000800
 80009b8:	40000c00 	.word	0x40000c00
 80009bc:	40001000 	.word	0x40001000
 80009c0:	40001400 	.word	0x40001400

080009c4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d008      	beq.n	80009e8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80009e6:	e007      	b.n	80009f8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	f023 0301 	bic.w	r3, r3, #1
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	801a      	strh	r2, [r3, #0]
  }
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	807b      	strh	r3, [r7, #2]
 8000a10:	4613      	mov	r3, r2
 8000a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a14:	787b      	ldrb	r3, [r7, #1]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d008      	beq.n	8000a2c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	899b      	ldrh	r3, [r3, #12]
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	887b      	ldrh	r3, [r7, #2]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000a2a:	e009      	b.n	8000a40 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	899b      	ldrh	r3, [r3, #12]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	4013      	ands	r3, r2
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	819a      	strh	r2, [r3, #12]
  }
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	81bb      	strh	r3, [r7, #12]
 8000a60:	2300      	movs	r3, #0
 8000a62:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	8a1b      	ldrh	r3, [r3, #16]
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	899b      	ldrh	r3, [r3, #12]
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	887b      	ldrh	r3, [r7, #2]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000a7c:	89bb      	ldrh	r3, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d005      	beq.n	8000a8e <TIM_GetITStatus+0x42>
 8000a82:	897b      	ldrh	r3, [r7, #10]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e001      	b.n	8000a92 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000aac:	887b      	ldrh	r3, [r7, #2]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	821a      	strh	r2, [r3, #16]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <main>:
void timer3_init(uint16_t period_ms);
void timer2_init(void);


int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	/* Initialize all configured peripherals */
	adc_init();
 8000ac4:	f000 f80c 	bl	8000ae0 <adc_init>
	timer2_init();
 8000ac8:	f000 f8a2 	bl	8000c10 <timer2_init>
	timer3_init(100);
 8000acc:	2064      	movs	r0, #100	; 0x64
 8000ace:	f000 f865 	bl	8000b9c <timer3_init>

	/* Start ADC Software Conversion */
	ADC_SoftwareStartConv(ADC1);
 8000ad2:	4802      	ldr	r0, [pc, #8]	; (8000adc <main+0x1c>)
 8000ad4:	f7ff fda8 	bl	8000628 <ADC_SoftwareStartConv>

  while(1) asm ("nop");
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <main+0x18>
 8000adc:	40012400 	.word	0x40012400

08000ae0 <adc_init>:
  return 0;
}


void adc_init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;

	/* Enable GPIO clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f7ff fe8d 	bl	8000808 <RCC_AHBPeriphClockCmd>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000aee:	2320      	movs	r3, #32
 8000af0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000af2:	2301      	movs	r3, #1
 8000af4:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000afa:	2303      	movs	r3, #3
 8000afc:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000afe:	f107 0318 	add.w	r3, r7, #24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4823      	ldr	r0, [pc, #140]	; (8000b94 <adc_init+0xb4>)
 8000b06:	f7ff fdc5 	bl	8000694 <GPIO_Init>

	/* Configure ADCx Channel 2 as analog input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 ;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8000b12:	2300      	movs	r3, #0
 8000b14:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b16:	f107 0318 	add.w	r3, r7, #24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481d      	ldr	r0, [pc, #116]	; (8000b94 <adc_init+0xb4>)
 8000b1e:	f7ff fdb9 	bl	8000694 <GPIO_Init>

	/* Enable the HSI oscillator */
	RCC_HSICmd(ENABLE);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fe60 	bl	80007e8 <RCC_HSICmd>

	/* Check that HSI oscillator is ready */
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8000b28:	bf00      	nop
 8000b2a:	2021      	movs	r0, #33	; 0x21
 8000b2c:	f7ff fec6 	bl	80008bc <RCC_GetFlagStatus>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f9      	beq.n	8000b2a <adc_init+0x4a>

	/* Enable ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000b36:	2101      	movs	r1, #1
 8000b38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b3c:	f7ff fe82 	bl	8000844 <RCC_APB2PeriphClockCmd>

	/* Initialize ADC structure */
	ADC_StructInit(&ADC_InitStructure);
 8000b40:	463b      	mov	r3, r7
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fbce 	bl	80002e4 <ADC_StructInit>

	/* ADC1 configuration */
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	717b      	strb	r3, [r7, #5]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	753b      	strb	r3, [r7, #20]
	ADC_Init(ADC1, &ADC_InitStructure);
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <adc_init+0xb8>)
 8000b62:	f7ff fb6b 	bl	800023c <ADC_Init>

	/* ADCx regular channel8 configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 1, ADC_SampleTime_16Cycles);
 8000b66:	2302      	movs	r3, #2
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	480a      	ldr	r0, [pc, #40]	; (8000b98 <adc_init+0xb8>)
 8000b6e:	f7ff fbf5 	bl	800035c <ADC_RegularChannelConfig>

	/* Enable the ADC */
	ADC_Cmd(ADC1, ENABLE);
 8000b72:	2101      	movs	r1, #1
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <adc_init+0xb8>)
 8000b76:	f7ff fbd5 	bl	8000324 <ADC_Cmd>

	/* Wait until the ADC1 is ready */
	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET);
 8000b7a:	bf00      	nop
 8000b7c:	2140      	movs	r1, #64	; 0x40
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <adc_init+0xb8>)
 8000b80:	f7ff fd6e 	bl	8000660 <ADC_GetFlagStatus>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f8      	beq.n	8000b7c <adc_init+0x9c>

}
 8000b8a:	bf00      	nop
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40012400 	.word	0x40012400

08000b9c <timer3_init>:

/* TIM3 init function */
void timer3_init(uint16_t period_ms)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f7ff fe69 	bl	8000880 <RCC_APB1PeriphClockCmd>

	TIM_Cmd(TIM3, DISABLE);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4816      	ldr	r0, [pc, #88]	; (8000c0c <timer3_init+0x70>)
 8000bb2:	f7ff ff07 	bl	80009c4 <TIM_Cmd>
	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 15999;
 8000bb6:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000bba:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	81fb      	strh	r3, [r7, #14]
	timerInitStructure.TIM_Period = period_ms-1;
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	613b      	str	r3, [r7, #16]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM3, &timerInitStructure);
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480e      	ldr	r0, [pc, #56]	; (8000c0c <timer3_init+0x70>)
 8000bd2:	f7ff fea5 	bl	8000920 <TIM_TimeBaseInit>
	TIM_Cmd(TIM3, ENABLE);
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <timer3_init+0x70>)
 8000bda:	f7ff fef3 	bl	80009c4 <TIM_Cmd>
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2101      	movs	r1, #1
 8000be2:	480a      	ldr	r0, [pc, #40]	; (8000c0c <timer3_init+0x70>)
 8000be4:	f7ff ff0e 	bl	8000a04 <TIM_ITConfig>
	
	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8000be8:	231d      	movs	r3, #29
 8000bea:	723b      	strb	r3, [r7, #8]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	727b      	strb	r3, [r7, #9]
	nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	72bb      	strb	r3, [r7, #10]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&nvicStructure);	
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fabd 	bl	800017c <NVIC_Init>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40000400 	.word	0x40000400

08000c10 <timer2_init>:

/* TIM2 init function */
void timer2_init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000c16:	2101      	movs	r1, #1
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff fe31 	bl	8000880 <RCC_APB1PeriphClockCmd>

	TIM_Cmd(TIM2, DISABLE);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c24:	f7ff fece 	bl	80009c4 <TIM_Cmd>
	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 15999;
 8000c28:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000c2c:	80bb      	strh	r3, [r7, #4]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	80fb      	strh	r3, [r7, #6]
	timerInitStructure.TIM_Period = 1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM2, &timerInitStructure);
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c42:	f7ff fe6d 	bl	8000920 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 8000c46:	2101      	movs	r1, #1
 8000c48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c4c:	f7ff feba 	bl	80009c4 <TIM_Cmd>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2101      	movs	r1, #1
 8000c54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c58:	f7ff fed4 	bl	8000a04 <TIM_ITConfig>
	
	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000c5c:	231c      	movs	r3, #28
 8000c5e:	703b      	strb	r3, [r7, #0]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	707b      	strb	r3, [r7, #1]
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	70bb      	strb	r3, [r7, #2]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&nvicStructure);
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fa84 	bl	800017c <NVIC_Init>
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <TIM2_IRQHandler>:

/* TIM2 Interrupt handler */
void TIM2_IRQHandler()
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	ADC_SoftwareStartConv(ADC1);
 8000c80:	4842      	ldr	r0, [pc, #264]	; (8000d8c <TIM2_IRQHandler+0x110>)
 8000c82:	f7ff fcd1 	bl	8000628 <ADC_SoftwareStartConv>
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)) asm ("nop");
 8000c86:	e000      	b.n	8000c8a <TIM2_IRQHandler+0xe>
 8000c88:	bf00      	nop
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	483f      	ldr	r0, [pc, #252]	; (8000d8c <TIM2_IRQHandler+0x110>)
 8000c8e:	f7ff fce7 	bl	8000660 <ADC_GetFlagStatus>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f7      	beq.n	8000c88 <TIM2_IRQHandler+0xc>
	AD_value=ADC_GetConversionValue(ADC1);
 8000c98:	483c      	ldr	r0, [pc, #240]	; (8000d8c <TIM2_IRQHandler+0x110>)
 8000c9a:	f7ff fcd5 	bl	8000648 <ADC_GetConversionValue>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <TIM2_IRQHandler+0x114>)
 8000ca4:	601a      	str	r2, [r3, #0]

	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cac:	f7ff fece 	bl	8000a4c <TIM_GetITStatus>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d067      	beq.n	8000d86 <TIM2_IRQHandler+0x10a>
	{
		if (AD_value >= 1 && AD_value < 2 && step!=1)
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <TIM2_IRQHandler+0x114>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00f      	beq.n	8000cde <TIM2_IRQHandler+0x62>
 8000cbe:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <TIM2_IRQHandler+0x114>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d80b      	bhi.n	8000cde <TIM2_IRQHandler+0x62>
 8000cc6:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <TIM2_IRQHandler+0x118>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d007      	beq.n	8000cde <TIM2_IRQHandler+0x62>
		{
			timer3_init(10000);	// edit
 8000cce:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cd2:	f7ff ff63 	bl	8000b9c <timer3_init>
			step = 1;
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <TIM2_IRQHandler+0x118>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e04e      	b.n	8000d7c <TIM2_IRQHandler+0x100>
		}
		else if(AD_value >= 2 && AD_value < 3 && step!=2)
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <TIM2_IRQHandler+0x114>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d90f      	bls.n	8000d06 <TIM2_IRQHandler+0x8a>
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <TIM2_IRQHandler+0x114>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d80b      	bhi.n	8000d06 <TIM2_IRQHandler+0x8a>
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <TIM2_IRQHandler+0x118>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d007      	beq.n	8000d06 <TIM2_IRQHandler+0x8a>
		{
			timer3_init(20000);	// edit
 8000cf6:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000cfa:	f7ff ff4f 	bl	8000b9c <timer3_init>
			step = 2;
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <TIM2_IRQHandler+0x118>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	e03a      	b.n	8000d7c <TIM2_IRQHandler+0x100>
		}
		else if(AD_value >= 3 && AD_value < 4 && step!=3)
 8000d06:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <TIM2_IRQHandler+0x114>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d90f      	bls.n	8000d2e <TIM2_IRQHandler+0xb2>
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <TIM2_IRQHandler+0x114>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d80b      	bhi.n	8000d2e <TIM2_IRQHandler+0xb2>
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <TIM2_IRQHandler+0x118>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d007      	beq.n	8000d2e <TIM2_IRQHandler+0xb2>
		{
			timer3_init(30000);	// edit
 8000d1e:	f247 5030 	movw	r0, #30000	; 0x7530
 8000d22:	f7ff ff3b 	bl	8000b9c <timer3_init>
			step = 3;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <TIM2_IRQHandler+0x118>)
 8000d28:	2203      	movs	r2, #3
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	e026      	b.n	8000d7c <TIM2_IRQHandler+0x100>
		}
		else if(AD_value >= 4 && AD_value < 5 && step!=4)
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <TIM2_IRQHandler+0x114>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d90f      	bls.n	8000d56 <TIM2_IRQHandler+0xda>
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <TIM2_IRQHandler+0x114>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d80b      	bhi.n	8000d56 <TIM2_IRQHandler+0xda>
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <TIM2_IRQHandler+0x118>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	d007      	beq.n	8000d56 <TIM2_IRQHandler+0xda>
		{
			timer3_init(40000);	// edit
 8000d46:	f649 4040 	movw	r0, #40000	; 0x9c40
 8000d4a:	f7ff ff27 	bl	8000b9c <timer3_init>
			step = 4;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <TIM2_IRQHandler+0x118>)
 8000d50:	2204      	movs	r2, #4
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	e012      	b.n	8000d7c <TIM2_IRQHandler+0x100>
		}
		else if(AD_value >= 5 && AD_value < 6 && step!=5)
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <TIM2_IRQHandler+0x114>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	d90e      	bls.n	8000d7c <TIM2_IRQHandler+0x100>
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <TIM2_IRQHandler+0x114>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	d80a      	bhi.n	8000d7c <TIM2_IRQHandler+0x100>
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <TIM2_IRQHandler+0x118>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b05      	cmp	r3, #5
 8000d6c:	d006      	beq.n	8000d7c <TIM2_IRQHandler+0x100>
		{
			timer3_init(50000);	// edit
 8000d6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d72:	f7ff ff13 	bl	8000b9c <timer3_init>
			step = 5;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <TIM2_IRQHandler+0x118>)
 8000d78:	2205      	movs	r2, #5
 8000d7a:	701a      	strb	r2, [r3, #0]
		}

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d82:	f7ff fe8d 	bl	8000aa0 <TIM_ClearITPendingBit>
	}
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40012400 	.word	0x40012400
 8000d90:	20000020 	.word	0x20000020
 8000d94:	2000001c 	.word	0x2000001c

08000d98 <TIM3_IRQHandler>:

/* TIM3 Interrupt handler */
void TIM3_IRQHandler()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <TIM3_IRQHandler+0x28>)
 8000da0:	f7ff fe54 	bl	8000a4c <TIM_GetITStatus>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d007      	beq.n	8000dba <TIM3_IRQHandler+0x22>
	{
		GPIO_ToggleBits(GPIOA,GPIO_Pin_5);
 8000daa:	2120      	movs	r1, #32
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <TIM3_IRQHandler+0x2c>)
 8000dae:	f7ff fd07 	bl	80007c0 <GPIO_ToggleBits>
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8000db2:	2101      	movs	r1, #1
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <TIM3_IRQHandler+0x28>)
 8000db6:	f7ff fe73 	bl	8000aa0 <TIM_ClearITPendingBit>
	}
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000dcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dce:	e003      	b.n	8000dd8 <LoopCopyDataInit>

08000dd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000dd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000dd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dd6:	3104      	adds	r1, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000ddc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000de0:	d3f6      	bcc.n	8000dd0 <CopyDataInit>
  ldr r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000de4:	e002      	b.n	8000dec <LoopFillZerobss>

08000de6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000de8:	f842 3b04 	str.w	r3, [r2], #4

08000dec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000dee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000df0:	d3f9      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000df2:	f000 f841 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f000 f903 	bl	8001000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfa:	f7ff fe61 	bl	8000ac0 <main>
  bx lr
 8000dfe:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e00:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000e04:	0800106c 	.word	0x0800106c
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e0c:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000e10:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000e14:	20000024 	.word	0x20000024

08000e18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC1_IRQHandler>
	...

08000e1c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000e2c:	e7fe      	b.n	8000e2c <HardFault_Handler+0x4>
 8000e2e:	bf00      	nop

08000e30 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>
 8000e36:	bf00      	nop

08000e38 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000e3c:	e7fe      	b.n	8000e3c <BusFault_Handler+0x4>
 8000e3e:	bf00      	nop

08000e40 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>
 8000e46:	bf00      	nop

08000e48 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000e7c:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <SystemInit+0x5c>)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <SystemInit+0x5c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000e88:	4912      	ldr	r1, [pc, #72]	; (8000ed4 <SystemInit+0x5c>)
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <SystemInit+0x5c>)
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <SystemInit+0x60>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <SystemInit+0x5c>)
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <SystemInit+0x5c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000e9e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000ea2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <SystemInit+0x5c>)
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <SystemInit+0x5c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eae:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000eb0:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <SystemInit+0x5c>)
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <SystemInit+0x5c>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000eba:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SystemInit+0x5c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000ec2:	f000 f80d 	bl	8000ee0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SystemInit+0x64>)
 8000ec8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ecc:	609a      	str	r2, [r3, #8]
#endif
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	88ffc00c 	.word	0x88ffc00c
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000eee:	4a41      	ldr	r2, [pc, #260]	; (8000ff4 <SetSysClock+0x114>)
 8000ef0:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <SetSysClock+0x114>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <SetSysClock+0x114>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3301      	adds	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d103      	bne.n	8000f18 <SetSysClock+0x38>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000f16:	d1f0      	bne.n	8000efa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000f18:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <SetSysClock+0x114>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000f24:	2301      	movs	r3, #1
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	e001      	b.n	8000f2e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d15a      	bne.n	8000fea <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000f34:	4a30      	ldr	r2, [pc, #192]	; (8000ff8 <SetSysClock+0x118>)
 8000f36:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <SetSysClock+0x118>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000f40:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <SetSysClock+0x118>)
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <SetSysClock+0x118>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8000f4c:	4a2a      	ldr	r2, [pc, #168]	; (8000ff8 <SetSysClock+0x118>)
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <SetSysClock+0x118>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f58:	4a26      	ldr	r2, [pc, #152]	; (8000ff4 <SetSysClock+0x114>)
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <SetSysClock+0x114>)
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8000f64:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <SetSysClock+0x11c>)
 8000f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f6a:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000f6c:	bf00      	nop
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <SetSysClock+0x11c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <SetSysClock+0x114>)
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <SetSysClock+0x114>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <SetSysClock+0x114>)
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <SetSysClock+0x114>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000f8a:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <SetSysClock+0x114>)
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <SetSysClock+0x114>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <SetSysClock+0x114>)
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <SetSysClock+0x114>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000f9c:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8000f9e:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <SetSysClock+0x114>)
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <SetSysClock+0x114>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8000fa8:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <SetSysClock+0x114>)
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <SetSysClock+0x114>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb4:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000fb6:	bf00      	nop
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <SetSysClock+0x114>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f9      	beq.n	8000fb8 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <SetSysClock+0x114>)
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <SetSysClock+0x114>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f023 0303 	bic.w	r3, r3, #3
 8000fce:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000fd0:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <SetSysClock+0x114>)
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <SetSysClock+0x114>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f043 0303 	orr.w	r3, r3, #3
 8000fda:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000fdc:	bf00      	nop
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SetSysClock+0x114>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b0c      	cmp	r3, #12
 8000fe8:	d1f9      	bne.n	8000fde <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40023c00 	.word	0x40023c00
 8000ffc:	40007000 	.word	0x40007000

08001000 <__libc_init_array>:
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <__libc_init_array+0x3c>)
 8001002:	b570      	push	{r4, r5, r6, lr}
 8001004:	461e      	mov	r6, r3
 8001006:	4c0e      	ldr	r4, [pc, #56]	; (8001040 <__libc_init_array+0x40>)
 8001008:	2500      	movs	r5, #0
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	10a4      	asrs	r4, r4, #2
 800100e:	42a5      	cmp	r5, r4
 8001010:	d004      	beq.n	800101c <__libc_init_array+0x1c>
 8001012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001016:	4798      	blx	r3
 8001018:	3501      	adds	r5, #1
 800101a:	e7f8      	b.n	800100e <__libc_init_array+0xe>
 800101c:	f000 f816 	bl	800104c <_init>
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <__libc_init_array+0x44>)
 8001022:	4c09      	ldr	r4, [pc, #36]	; (8001048 <__libc_init_array+0x48>)
 8001024:	461e      	mov	r6, r3
 8001026:	1ae4      	subs	r4, r4, r3
 8001028:	10a4      	asrs	r4, r4, #2
 800102a:	2500      	movs	r5, #0
 800102c:	42a5      	cmp	r5, r4
 800102e:	d004      	beq.n	800103a <__libc_init_array+0x3a>
 8001030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001034:	4798      	blx	r3
 8001036:	3501      	adds	r5, #1
 8001038:	e7f8      	b.n	800102c <__libc_init_array+0x2c>
 800103a:	bd70      	pop	{r4, r5, r6, pc}
 800103c:	08001064 	.word	0x08001064
 8001040:	08001064 	.word	0x08001064
 8001044:	08001064 	.word	0x08001064
 8001048:	08001068 	.word	0x08001068

0800104c <_init>:
 800104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104e:	bf00      	nop
 8001050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001052:	bc08      	pop	{r3}
 8001054:	469e      	mov	lr, r3
 8001056:	4770      	bx	lr

08001058 <_fini>:
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105a:	bf00      	nop
 800105c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105e:	bc08      	pop	{r3}
 8001060:	469e      	mov	lr, r3
 8001062:	4770      	bx	lr
